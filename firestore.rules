rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for users collection
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Allow creation of user profile during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Base rules for stories collection
    match /stories/{storyId} {
      // Allow public read access to stories
      allow read: if true;
      
      // Allow querying stories by userId
      allow list: if request.query.limit <= 100;
      
      // Allow write only by authenticated users and verify userId matches auth
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if request.auth != null &&
        resource.data.userId == request.auth.uid;
      
      // Rules for likes subcollection
      match /likes/{likeId} {
        // Allow read access to everyone
        allow read: if true;
        
        // Allow create/delete only if user is authenticated and likeId matches their uid
        allow create: if request.auth != null 
          && request.resource.data.userId == request.auth.uid;
        allow delete: if request.auth != null 
          && resource.data.userId == request.auth.uid;
      }
      
      // Rules for comments subcollection
      match /comments/{commentId} {
        // Allow read access to everyone
        allow read: if true;
        
        // Allow create if user is authenticated and they set themselves as author
        allow create: if request.auth != null 
          && request.resource.data.userId == request.auth.uid;
          
        // Allow update/delete only if user is the comment author
        allow update, delete: if request.auth != null 
          && resource.data.userId == request.auth.uid;
      }
    }
    
    // Rules for standalone likes collection
    match /likes/{likeId} {
      allow read: if true;
      // Allow listing/querying likes with limit
      allow list: if request.query.limit <= 1000;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // Rules for standalone comments collection
    match /comments/{commentId} {
      allow read: if true;
      // Allow listing/querying comments with limit
      allow list: if request.query.limit <= 1000;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    match /todos/{todoId} {
      // Allow read/write only if the authenticated user's ID matches the userID field
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userID;
      
      // For creating new todos, check the userID field in the incoming data
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userID;
    }
  }
} 